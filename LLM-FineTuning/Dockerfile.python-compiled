# Copyright (c) 2023 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0


ARG IMAGE_NAME=ubuntu
ARG IMAGE_TAG=22.04

# Base image to be used everywhere
FROM ${IMAGE_NAME}:${IMAGE_TAG} as base
RUN apt-get clean && \
    apt-get update && \
    apt-get upgrade -y && \
    apt-get clean autoclean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Python image
FROM base as python-dev

ARG PYTHON=python3.9
ARG PYTHON_VER=3.9.18

RUN apt-get update && \
    apt-get install --no-install-recommends --fix-missing -y \
      build-essential \
      ca-certificates \
      curl \
      libbz2-dev \
      libffi-dev \
      libgdbm-dev \
      liblzma-dev \
      libncurses5-dev \
      libnss3-dev \
      libreadline-dev \
      libsqlite3-dev \
      libssl-dev \
      make \
      pkg-config \
      zlib1g-dev

RUN curl https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz -o /tmp/Python-${PYTHON_VER}.tar.xz && \
     cd /tmp/ && \
     tar -xf Python-${PYTHON_VER}.tar.xz && \
     rm -rf Python-${PYTHON_VER}.tar.xz

RUN cd /tmp/Python-${PYTHON_VER} && \
    ./configure --enable-optimizations && \
    make -s -j${nproc} && \
    make altinstall && \
    ldconfig /opt/Python${PYTHON_VER}

RUN ln -sf /usr/local/bin/${PYTHON} /usr/local/bin/python && \
    ln -sf /usr/local/bin/${PYTHON} /usr/local/bin/python3

FROM base as python-base

COPY --from=python-dev /usr/local/lib/python3.9 /usr/local/lib/python3.9
COPY --from=python-dev /usr/local/bin/python3.9 /usr/local/bin/python3.9
COPY --from=python-dev /usr/local/bin/python3 /usr/local/bin/python3
COPY --from=python-dev /usr/local/bin/python /usr/local/bin/python

FROM python-base as final

SHELL ["/bin/bash", "-c"]

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends --fix-missing \
    ca-certificates \
    google-perftools \
    libgl1 \
    libjemalloc2 \
    numactl

ARG ONECCL_VER=2.0.0
ARG TORCH_VER=2.0.1
ARG IPEX_VER=2.0.100
ARG INC_VER=2.3
ARG OPTIMUM_VER=87da8b0eb2e99f7e80df2079e5956b19212b7c1b

RUN python -m pip install --no-cache-dir install --upgrade pip setuptools wheel && \
    mkdir /tmp/optimum-intel && \
    cd /tmp/optimum-intel && \
    curl -sSL --retry 5 https://github.com/huggingface/optimum-intel/tarball/${OPTIMUM_VER} | tar --strip-components=1 -xzf - && \
    python setup.py bdist_wheel && \
    python -m pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cpu \
    dist/* \
    https://intel-extension-for-pytorch.s3.amazonaws.com/ipex_stable/cpu/intel_extension_for_pytorch-${IPEX_VER}%2Bcpu-cp39-cp39-linux_x86_64.whl \
    https://intel-extension-for-pytorch.s3.amazonaws.com/torch_ccl/cpu/oneccl_bind_pt-${ONECCL_VER}%2Bcpu-cp39-cp39-linux_x86_64.whl \
    'mkl-include==2023.2.0' \
    'mkl==2023.2.0' \
    'onnx==1.13.0' \
    'protobuf==3.20.3' \
    neural-compressor==${INC_VER} \
    torch==${TORCH_VER} \
    SentencePiece \
    accelerate \
    datasets \
    einops \
    evaluate \
    nltk \
    onnxruntime \
    onnxruntime-extensions \
    peft \
    psutil \
    py-cpuinfo \
    rouge_score \
    tokenizers && \
    rm -rf /tmp/optimum-intel

# Install OpenSSH for MPI to communicate between containers
RUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \
    openssh-client \
    openssh-server && \
    rm  /etc/ssh/ssh_host_*_key \
    /etc/ssh/ssh_host_*_key.pub && \
    apt-get clean autoclean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd && \
    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

COPY scripts /workspace/scripts/

COPY generate_ssh_keys.sh /workspace/generate_ssh_keys.sh

RUN cat /workspace/generate_ssh_keys.sh >> ${HOME}/.bash_profile && \
    cat /workspace/generate_ssh_keys.sh >> ${HOME}/.bashrc

ENV BASH_ENV=${HOME}/.bash_profile
